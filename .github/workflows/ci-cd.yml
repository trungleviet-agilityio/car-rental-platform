name: Car Rental Platform CI/CD

on:
  push:
    branches:
      - poc
  pull_request:
    branches:
      - poc
  workflow_dispatch:
    inputs:
      target:
        description: local (build only) or dev (deploy to AWS)
        required: true
        default: dev
        type: choice
        options: [local, dev]

env:
  AWS_REGION: ap-southeast-1
  NODE_VERSION: 20
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        working-directory: poc/backend
        run: npm install

      - name: Run backend tests
        working-directory: poc/backend
        run: |
          npm run build
          # Add test command when available
          # npm test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install backend dependencies
        working-directory: poc/backend
        run: npm install

      - name: Build backend
        working-directory: poc/backend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: poc/backend/dist/
          retention-days: 1

  deploy:
    if: ${{ github.event.inputs.target == 'dev' || (github.event_name == 'push' && github.ref == 'refs/heads/poc') }}
    needs: build
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        working-directory: poc/backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: car-rental-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create ECR repository if it doesn't exist
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

          # Build and push Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Output image URI for CDK
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('poc/cdk/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install CDK dependencies
        working-directory: poc/cdk
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Install CDK CLI
        run: npm install -g aws-cdk@latest

      - name: CDK Bootstrap
        working-directory: poc/cdk
        run: |
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ env.AWS_REGION }} || true

      - name: Detect Infrastructure Changes
        id: detect-changes
        run: |
          echo "🔍 Detecting infrastructure changes..."
          
          # Check for infrastructure-related changes
          INFRA_CHANGES=$(git diff --name-only HEAD~1 | grep -E "(cdk/|\.py$|\.yml$|\.yaml$)" | grep -v "requirements.txt" | wc -l || echo "0")
          
          # Check for backend-only changes
          BACKEND_CHANGES=$(git diff --name-only HEAD~1 | grep -E "(poc/backend/|\.ts$|\.js$|\.json$)" | grep -v "package-lock.json" | wc -l || echo "0")
          
          echo "infra_changes=$INFRA_CHANGES" >> $GITHUB_OUTPUT
          echo "backend_changes=$BACKEND_CHANGES" >> $GITHUB_OUTPUT
          
          echo "📊 Change Analysis:"
          echo "- Infrastructure changes: $INFRA_CHANGES files"
          echo "- Backend changes: $BACKEND_CHANGES files"
          
          if [ "$INFRA_CHANGES" -gt 0 ]; then
            echo "🏗️  Infrastructure changes detected - will deploy all stacks"
            echo "deploy_type=full" >> $GITHUB_OUTPUT
          else
            echo "🚀 Backend-only changes - will deploy only Fargate stack"
            echo "deploy_type=fast" >> $GITHUB_OUTPUT
          fi

      - name: Smart CDK Deployment
        working-directory: poc/cdk
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          if [ "${{ steps.detect-changes.outputs.deploy_type }}" = "full" ]; then
            echo "🏗️  Deploying all infrastructure stacks..."
            echo "⏱️  Expected time: 15-20 minutes"
            
            # Deploy all stacks with image tag
            cdk deploy \
              --require-approval never \
              --context imageTag=${{ env.IMAGE_TAG }} \
              CarRentalStorageStack \
              CarRentalFargateStack \
              CarRentalAuthStack \
              CarRentalApiStack
              
            echo "deployed_stacks=all" >> $GITHUB_ENV
          else
            echo "🚀 Fast deployment - updating only Fargate stack..."
            echo "⏱️  Expected time: 2-3 minutes"
            
            # Deploy only Fargate stack with new image
            cdk deploy CarRentalFargateStack \
              --require-approval never \
              --context imageTag=${{ env.IMAGE_TAG }}
              
            echo "deployed_stacks=fargate_only" >> $GITHUB_ENV
          fi

      - name: Generate deployment summary
        if: success()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Development" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Type:** ${{ steps.detect-changes.outputs.deploy_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.deployed_stacks }}" = "all" ]; then
            echo "### 📋 Deployed Stacks:" >> $GITHUB_STEP_SUMMARY
            echo "- CarRentalStorageStack" >> $GITHUB_STEP_SUMMARY
            echo "- CarRentalFargateStack" >> $GITHUB_STEP_SUMMARY
            echo "- CarRentalAuthStack" >> $GITHUB_STEP_SUMMARY
            echo "- CarRentalApiStack" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment Time:** ~15-20 minutes (Full Infrastructure)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📋 Deployed Stacks:" >> $GITHUB_STEP_SUMMARY
            echo "- CarRentalFargateStack (App Update Only)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Deployment Time:** ~2-3 minutes (Fast App Deployment)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Change Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure changes: ${{ steps.detect-changes.outputs.infra_changes }} files" >> $GITHUB_STEP_SUMMARY
          echo "- Backend changes: ${{ steps.detect-changes.outputs.backend_changes }} files" >> $GITHUB_STEP_SUMMARY
