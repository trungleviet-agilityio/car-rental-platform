{
  "info": {
    "name": "Car Rental PoC - Updated with Security & Lambda Integration",
    "description": "Complete testing collection for Car Rental Platform with security authentication and Lambda integration",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "b9a6f7c0-0000-4000-9000-000000pocv2"
  },
  "item": [
    {
      "name": "üè† Local Development (Mock Providers + Lambda)",
      "description": "Local testing with mock providers including Lambda integration and security authentication",
      "item": [
        {
          "name": "üìä System Health & Lambda Status",
          "item": [
            {
              "name": "1. Health Check with Lambda Provider",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is OK', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Lambda provider is mock', function () {",
                      "    const providers = pm.response.json().providers;",
                      "    pm.expect(providers.lambda).to.eql('mock');",
                      "    pm.expect(providers.auth).to.eql('mock');",
                      "    pm.expect(providers.notifications).to.eql('mock');",
                      "    pm.expect(providers.payment).to.eql('mock');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{local_base}}/",
                  "host": ["{{local_base}}"],
                  "path": [""]
                },
                "description": "Verify system health and Lambda provider configuration (No auth required)"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üöó Car Management (Internal Catalog)",
          "item": [
            {
              "name": "2. Add Test Car (Owner Role Required)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Car added successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.expect(pm.response.json()).to.have.property('id');",
                      "});",
                      "",
                      "// Save car ID for booking tests",
                      "const carId = pm.response.json().id;",
                      "if (carId) {",
                      "    pm.environment.set('test_car_id', carId);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{owner_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/cars",
                  "host": ["{{local_base}}"],
                  "path": ["cars"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"make\": \"Toyota\",\n  \"model\": \"Camry\",\n  \"seats\": 5,\n  \"pricePerDayCents\": 5000,\n  \"depositCents\": 50000,\n  \"owner\": {\n    \"email\": \"owner@example.com\",\n    \"phone\": \"+1234567890\"\n  }\n}"
                },
                "description": "Add a test car for booking flow testing (Requires owner role)"
              },
              "response": []
            },
            {
              "name": "3. List Available Cars (Auth Required)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/cars",
                  "host": ["{{local_base}}"],
                  "path": ["cars"]
                },
                "description": "Get list of available cars (Requires authentication)"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìí Complete Booking Flow with Lambda Integration",
          "description": "Test the complete booking flow as per sequence diagrams with authentication",
          "item": [
            {
              "name": "4. Create Booking (Triggers Lambda Owner Notification)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Booking created successfully', function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.expect(pm.response.json().message).to.eql('Booking created successfully');",
                      "    pm.expect(pm.response.json().status).to.eql('pending_owner_decision');",
                      "});",
                      "",
                      "pm.test('Lambda notification triggered', function () {",
                      "    // In mock mode, Lambda calls should be simulated",
                      "    const booking = pm.response.json().booking;",
                      "    pm.expect(booking.status).to.eql('pending');",
                      "});",
                      "",
                      "// Save booking ID for decision testing",
                      "const bookingId = pm.response.json().booking.id;",
                      "if (bookingId) {",
                      "    pm.environment.set('test_booking_id', bookingId);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/bookings",
                  "host": ["{{local_base}}"],
                  "path": ["bookings"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"{{user_cognito_sub}}\",\n  \"carId\": \"{{test_car_id}}\",\n  \"startDate\": \"2030-01-01T10:00:00Z\",\n  \"endDate\": \"2030-01-02T10:00:00Z\",\n  \"totalPrice\": 5000\n}"
                },
                "description": "Create booking - triggers Lambda function for owner notification (Step 7-11 in sequence diagram)"
              },
              "response": []
            },
            {
              "name": "5. Owner Decision (Accept) - Triggers Lambda Renter Notification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Owner decision processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().message).to.include('accepted successfully');",
                      "    pm.expect(pm.response.json().renterNotified).to.be.true;",
                      "});",
                      "",
                      "pm.test('Lambda renter notification triggered', function () {",
                      "    const booking = pm.response.json().booking;",
                      "    pm.expect(booking.status).to.eql('accepted');",
                      "    pm.expect(booking.ownerDecision).to.eql('accepted');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{owner_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/bookings/decision",
                  "host": ["{{local_base}}"],
                  "path": ["bookings", "decision"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"bookingId\": \"{{test_booking_id}}\",\n  \"decision\": \"accepted\",\n  \"renter\": {\n    \"email\": \"renter@example.com\",\n    \"phone\": \"+1555666777\"\n  }\n}"
                },
                "description": "Owner accepts booking - triggers Lambda function for renter notification (Requires owner role)"
              },
              "response": []
            },
            {
              "name": "6. Create Payment Intent for Accepted Booking",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.expect(pm.response.json()).to.have.property('id');",
                      "    pm.expect(pm.response.json()).to.have.property('clientSecret');",
                      "    pm.expect(pm.response.json().amount).to.eql(5000);",
                      "});",
                      "",
                      "// Save payment intent for confirmation",
                      "const paymentIntentId = pm.response.json().id;",
                      "if (paymentIntentId) {",
                      "    pm.environment.set('payment_intent_id', paymentIntentId);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/bookings/{{test_booking_id}}/payment/intent",
                  "host": ["{{local_base}}"],
                  "path": ["bookings", "{{test_booking_id}}", "payment", "intent"]
                },
                "description": "Create payment intent for accepted booking (Requires authentication)"
              },
              "response": []
            },
            {
              "name": "7. Confirm Payment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Payment confirmed', function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.expect(pm.response.json().message).to.eql('Payment confirmed successfully');",
                      "    pm.expect(pm.response.json().booking.status).to.eql('paid');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/bookings/{{test_booking_id}}/payment/confirm",
                  "host": ["{{local_base}}"],
                  "path": ["bookings", "{{test_booking_id}}", "payment", "confirm"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"paymentIntentId\": \"{{payment_intent_id}}\",\n  \"paymentMethodId\": \"pm_mock_card_visa\"\n}"
                },
                "description": "Confirm payment - completes booking flow (Requires authentication)"
              },
              "response": []
            },
            {
              "name": "8. Get User Bookings (Resource Ownership)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/bookings/{{user_cognito_sub}}",
                  "host": ["{{local_base}}"],
                  "path": ["bookings", "{{user_cognito_sub}}"]
                },
                "description": "Get all bookings for a user (Resource ownership validation)"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìÑ KYC Flow with Lambda Integration", 
          "description": "KYC document processing with Lambda and Step Functions",
          "item": [
            {
              "name": "9. Create User for KYC Testing",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User created/synced successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json()).to.have.property('id');",
                      "    pm.expect(pm.response.json()).to.have.property('cognitoSub');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/users/sync",
                  "host": ["{{local_base}}"],
                  "path": ["users", "sync"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"{{user_cognito_sub}}\",\n  \"username\": \"testuser\",\n  \"phoneNumber\": \"+84123456789\",\n  \"email\": \"test@example.com\"\n}"
                },
                "description": "Create user before KYC testing (Requires authentication)"
              },
              "response": []
            },
            {
              "name": "10. KYC Presign URL (via Lambda)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Presigned URL generated via Lambda', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json()).to.have.property('uploadUrl');",
                      "    pm.expect(pm.response.json()).to.have.property('key');",
                      "    pm.expect(pm.response.json().method).to.eql('PUT');",
                      "});",
                      "",
                      "// Save document key for validation",
                      "const documentKey = pm.response.json().key;",
                      "if (documentKey) {",
                      "    pm.environment.set('document_key', documentKey);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/kyc/presign",
                  "host": ["{{local_base}}"],
                  "path": ["kyc", "presign"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"{{user_cognito_sub}}\",\n  \"contentType\": \"image/jpeg\"\n}"
                },
                "description": "Generate presigned URL via Lambda function (Resource ownership validation)"
              },
              "response": []
            },
            {
              "name": "11. KYC Validate (via Step Functions + Lambda)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('KYC validation started via Step Functions', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json()).to.have.property('executionArn');",
                      "    pm.expect(pm.response.json().status).to.eql('RUNNING');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/kyc/validate",
                  "host": ["{{local_base}}"],
                  "path": ["kyc", "validate"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"{{user_cognito_sub}}\",\n  \"key\": \"{{document_key}}\"\n}"
                },
                "description": "Start KYC validation via Lambda ‚Üí Step Functions (Resource ownership validation)"
              },
              "response": []
            },
            {
              "name": "12. KYC Callback (Lambda ‚Üí NestJS)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('KYC verification successful via Lambda callback', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().cognitoSub).to.eql('{{user_cognito_sub}}');",
                      "    pm.expect(pm.response.json().kycStatus).to.eql('verified');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/kyc/callback",
                  "host": ["{{local_base}}"],
                  "path": ["kyc", "callback"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"{{user_cognito_sub}}\",\n  \"key\": \"{{document_key}}\",\n  \"status\": \"verified\"\n}"
                },
                "description": "Simulate Lambda callback from Step Functions (No auth required - internal callback)"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üîê Authentication Flow",
          "description": "Complete user authentication sequence",
          "item": [
            {
              "name": "13. Sign Up User",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/auth/signup",
                  "host": ["{{local_base}}"],
                  "path": ["auth", "signup"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"StrongPass!23\",\n  \"phone\": \"+84123456789\"\n}"
                },
                "description": "Sign up new user account (No auth required)"
              },
              "response": []
            },
            {
              "name": "14. OTP Initiate (Phone)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('OTP sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().message).to.include('OTP sent');",
                      "});",
                      "",
                      "// Save debug OTP for next request if available",
                      "const debugOtp = pm.response.json().debugOtp;",
                      "if (debugOtp) {",
                      "    pm.environment.set('debug_otp', debugOtp);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/auth/otp/initiate",
                  "host": ["{{local_base}}"],
                  "path": ["auth", "otp", "initiate"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"+84123456789\"\n}"
                },
                "description": "Initiate OTP via phone number (No auth required)"
              },
              "response": []
            },
            {
              "name": "15. OTP Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('OTP verification successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().message).to.include('verified');",
                      "});",
                      "",
                      "// Check for tokens if provided",
                      "const response = pm.response.json();",
                      "if (response.tokens) {",
                      "    pm.test('Tokens provided', function () {",
                      "        pm.expect(response.tokens).to.have.property('AccessToken');",
                      "        pm.expect(response.tokens).to.have.property('IdToken');",
                      "        pm.expect(response.tokens).to.have.property('RefreshToken');",
                      "    });",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/auth/otp/verify",
                  "host": ["{{local_base}}"],
                  "path": ["auth", "otp", "verify"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"+84123456789\",\n  \"code\": \"123456\"\n}"
                },
                "description": "Verify OTP code (No auth required)"
              },
              "response": []
            },
            {
              "name": "16. Sign In",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Sign in successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().message).to.include('successful');",
                      "});",
                      "",
                      "// Check for tokens if provided",
                      "const response = pm.response.json();",
                      "if (response.tokens) {",
                      "    pm.test('Tokens provided', function () {",
                      "        pm.expect(response.tokens).to.have.property('AccessToken');",
                      "        pm.expect(response.tokens).to.have.property('IdToken');",
                      "        pm.expect(response.tokens).to.have.property('RefreshToken');",
                      "    });",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/auth/signin",
                  "host": ["{{local_base}}"],
                  "path": ["auth", "signin"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"StrongPass!23\"\n}"
                },
                "description": "Sign in with email and password (No auth required)"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìß Notification Services",
          "description": "Multi-provider notification system",
          "item": [
            {
              "name": "17. Email Notification",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/notify/email",
                  "host": ["{{local_base}}"],
                  "path": ["notify", "email"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"to\": \"test@example.com\",\n  \"subject\": \"Car Rental Confirmation\",\n  \"text\": \"Your car rental booking has been confirmed. Thank you for choosing our service!\"\n}"
                },
                "description": "Send email notification via DIP providers (Requires authentication)"
              },
              "response": []
            },
            {
              "name": "18. SMS Notification",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{user_token}}" }
                ],
                "url": {
                  "raw": "{{local_base}}/notify/sms",
                  "host": ["{{local_base}}"],
                  "path": ["notify", "sms"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"to\": \"+84123456789\",\n  \"message\": \"Your car rental is confirmed! Pickup time: 2PM today. Location: 123 Main St. Enjoy your ride!\"\n}"
                },
                "description": "Send SMS notification via DIP providers (Requires authentication)"
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "‚òÅÔ∏è Production Environment (Real AWS + Lambda)",
      "description": "Production testing with real AWS/Lambda providers",
      "item": [
        {
          "name": "üìä System Health",
          "item": [
            {
              "name": "Health Check (Production)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is OK', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Real AWS providers configured', function () {",
                      "    const providers = pm.response.json().providers;",
                      "    pm.expect(providers.auth).to.eql('aws');",
                      "    pm.expect(providers.lambda).to.eql('aws');",
                      "    pm.expect(providers.storage).to.eql('s3');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{production_base}}/",
                  "host": ["{{production_base}}"],
                  "path": [""]
                },
                "description": "Production health check with real AWS services (No auth required)"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìí Booking Flow (Real Lambda Integration)",
          "item": [
            {
              "name": "Create Booking (Real Lambda Notification)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "Authorization", "value": "Bearer {{production_user_token}}" }
                ],
                "url": {
                  "raw": "{{production_base}}/bookings",
                  "host": ["{{production_base}}"],
                  "path": ["bookings"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"{{production_user_cognito_sub}}\",\n  \"carId\": \"prod-car-1\",\n  \"startDate\": \"2030-01-01T10:00:00Z\",\n  \"endDate\": \"2030-01-02T10:00:00Z\",\n  \"totalPrice\": 7500\n}"
                },
                "description": "Real booking with actual Lambda notification triggers (Requires authentication)"
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default environment if not set",
          "if (!pm.environment.get('local_base')) {",
          "    pm.environment.set('local_base', 'http://localhost:3000/car-rental/v1');",
          "}",
          "",
          "// Set default tokens if not set",
          "if (!pm.environment.get('user_token')) {",
          "    pm.environment.set('user_token', 'mock-auth-token-123');",
          "}",
          "if (!pm.environment.get('owner_token')) {",
          "    pm.environment.set('owner_token', 'mock-owner-token-456');",
          "}",
          "if (!pm.environment.get('user_cognito_sub')) {",
          "    pm.environment.set('user_cognito_sub', 'mock-user-renter-123');",
          "}",
          "",
          "// Log the current request for debugging",
          "console.log('üöÄ Request:', pm.request.name);",
          "console.log('üîê Using token:', pm.environment.get('user_token'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to log response time",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Log response for debugging",
          "console.log('‚úÖ Response status:', pm.response.status);",
          "console.log('‚è±Ô∏è  Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "local_base",
      "value": "http://localhost:3000/car-rental/v1",
      "description": "Local development base URL with mock providers including Lambda"
    },
    {
      "key": "production_base", 
      "value": "http://your-alb-dns.ap-southeast-1.elb.amazonaws.com/api",
      "description": "Production ALB DNS name with real AWS Lambda integration"
    },
    {
      "key": "user_token",
      "value": "mock-auth-token-123",
      "description": "Mock authentication token for regular user (renter role)"
    },
    {
      "key": "owner_token",
      "value": "mock-owner-token-456",
      "description": "Mock authentication token for owner/admin role"
    },
    {
      "key": "user_cognito_sub",
      "value": "mock-user-renter-123",
      "description": "Mock Cognito sub for user identification"
    },
    {
      "key": "production_user_token",
      "value": "real-jwt-token-here",
      "description": "Real JWT token for production testing"
    },
    {
      "key": "production_user_cognito_sub",
      "value": "real-cognito-sub-uuid",
      "description": "Real Cognito sub for production testing"
    },
    {
      "key": "test_car_id",
      "value": "",
      "description": "Test car ID for booking flow"
    },
    {
      "key": "test_booking_id",
      "value": "",
      "description": "Test booking ID for decision and payment flow"
    },
    {
      "key": "document_key",
      "value": "",
      "description": "KYC document key from presign"
    },
    {
      "key": "payment_intent_id",
      "value": "",
      "description": "Payment intent ID for confirmation"
    },
    {
      "key": "debug_otp",
      "value": "",
      "description": "Debug OTP code from mock provider"
    }
  ]
}
