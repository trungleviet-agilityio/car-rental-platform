{
  "info": {
    "name": "Car Rental PoC - DIP Architecture",
    "description": "Complete testing collection for Car Rental Platform demonstrating Dependency Inversion Principle (DIP) with multiple provider support",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "b9a6f7c0-0000-4000-9000-000000poccol"
  },
  "item": [
    {
      "name": "üè† Local Development (Mock Providers)",
      "description": "Local testing with mock providers for fast development",
      "item": [
        {
          "name": "üìä System Health",
          "item": [
            {
              "name": "1. Health Check",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is OK', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Providers are mock', function () {",
                      "    const providers = pm.response.json().providers;",
                      "    pm.expect(providers.auth).to.eql('mock');",
                      "    pm.expect(providers.notifications).to.eql('mock');",
                      "    pm.expect(providers.storage).to.eql('mock');",
                      "    pm.expect(providers.payment).to.eql('mock');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{local_base}}/",
                  "host": ["{{local_base}}"],
                  "path": [""]
                },
                "description": "Verify system health and provider configuration"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üîê Authentication Flow",
          "description": "Complete user authentication sequence",
          "item": [
            {
              "name": "2. Register User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.expect(pm.response.json().message).to.include('Sign up initiated');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/auth/register",
                  "host": ["{{local_base}}"],
                  "path": ["auth", "register"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"test@example.com\",\n  \"password\": \"StrongPass!23\",\n  \"phone_number\": \"+84123456789\"\n}"
                },
                "description": "Register new user account"
              },
              "response": []
            },
            {
              "name": "3. OTP Initiate (Email)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('OTP sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().message).to.eql('OTP sent');",
                      "    pm.expect(pm.response.json().channel).to.eql('email');",
                      "});",
                      "",
                      "// Save debug OTP for next request",
                      "const debugOtp = pm.response.json().debugOtp;",
                      "if (debugOtp) {",
                      "    pm.environment.set('debug_otp', debugOtp);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/auth/login",
                  "host": ["{{local_base}}"],
                  "path": ["auth", "login"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"otp_initiate\",\n  \"channel\": \"email\",\n  \"email\": \"test@example.com\"\n}"
                },
                "description": "Initiate OTP via email notification"
              },
              "response": []
            },
            {
              "name": "4. OTP Verify",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Login successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().message).to.eql('Login successful');",
                      "});",
                      "",
                      "pm.test('Tokens provided', function () {",
                      "    const tokens = pm.response.json().tokens;",
                      "    pm.expect(tokens).to.have.property('AccessToken');",
                      "    pm.expect(tokens).to.have.property('IdToken');",
                      "    pm.expect(tokens).to.have.property('RefreshToken');",
                      "    ",
                      "    // Save tokens for authenticated requests",
                      "    pm.environment.set('access_token', tokens.AccessToken);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/auth/login",
                  "host": ["{{local_base}}"],
                  "path": ["auth", "login"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"otp_verify\",\n  \"channel\": \"email\",\n  \"email\": \"test@example.com\",\n  \"otp_code\": \"{{debug_otp}}\"\n}"
                },
                "description": "Verify OTP and obtain authentication tokens"
              },
              "response": []
            },
            {
              "name": "5. User Sync",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User sync successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "    pm.expect(pm.response.json()).to.have.property('id');",
                      "    pm.expect(pm.response.json().cognitoSub).to.eql('mock-cognito-sub-123');",
                      "});",
                      "",
                      "// Save user ID for KYC flow",
                      "const userId = pm.response.json().id;",
                      "if (userId) {",
                      "    pm.environment.set('user_id', userId);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/users/sync",
                  "host": ["{{local_base}}"],
                  "path": ["users", "sync"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"mock-cognito-sub-123\",\n  \"username\": \"test@example.com\",\n  \"phoneNumber\": \"+84123456789\",\n  \"email\": \"test@example.com\"\n}"
                },
                "description": "Synchronize user data to database"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìÑ KYC Document Flow",
          "description": "Know Your Customer document processing",
          "item": [
            {
              "name": "6. KYC Presign Upload URL",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Presigned URL generated', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json()).to.have.property('uploadUrl');",
                      "    pm.expect(pm.response.json()).to.have.property('key');",
                      "    pm.expect(pm.response.json().method).to.eql('PUT');",
                      "});",
                      "",
                      "// Save document key for callback",
                      "const documentKey = pm.response.json().key;",
                      "if (documentKey) {",
                      "    pm.environment.set('document_key', documentKey);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/kyc/presign",
                  "host": ["{{local_base}}"],
                  "path": ["kyc", "presign"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"mock-cognito-sub-123\",\n  \"contentType\": \"image/jpeg\"\n}"
                },
                "description": "Generate presigned URL for document upload"
              },
              "response": []
            },
            {
              "name": "7. KYC Callback (Simulate Verification)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('KYC verification successful', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().cognitoSub).to.eql('mock-cognito-sub-123');",
                      "    pm.expect(pm.response.json().kycStatus).to.eql('verified');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/kyc/callback",
                  "host": ["{{local_base}}"],
                  "path": ["kyc", "callback"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"mock-cognito-sub-123\",\n  \"key\": \"{{document_key}}\",\n  \"status\": \"verified\"\n}"
                },
                "description": "Simulate document verification callback"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìß Notification Services",
          "description": "Multi-provider notification system",
          "item": [
            {
              "name": "8. Email Notification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Email sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().success).to.be.true;",
                      "    pm.expect(pm.response.json()).to.have.property('messageId');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/notify/email",
                  "host": ["{{local_base}}"],
                  "path": ["notify", "email"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"to\": \"test@example.com\",\n  \"subject\": \"Car Rental Confirmation\",\n  \"text\": \"Your car rental booking has been confirmed. Thank you for choosing our service!\"\n}"
                },
                "description": "Send email notification via DIP providers"
              },
              "response": []
            },
            {
              "name": "9. SMS Notification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('SMS sent successfully', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().success).to.be.true;",
                      "    pm.expect(pm.response.json()).to.have.property('messageId');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/notify/sms",
                  "host": ["{{local_base}}"],
                  "path": ["notify", "sms"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"to\": \"+84123456789\",\n  \"message\": \"Your car rental is confirmed! Pickup time: 2PM today. Location: 123 Main St. Enjoy your ride!\"\n}"
                },
                "description": "Send SMS notification via DIP providers"
              },
              "response": []
            },
            {
              "name": "10. OTP Notification (Unified)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('OTP notification sent', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().success).to.be.true;",
                      "    pm.expect(pm.response.json()).to.have.property('messageId');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/notify/otp",
                  "host": ["{{local_base}}"],
                  "path": ["notify", "otp"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"channel\": \"email\",\n  \"to\": \"test@example.com\",\n  \"code\": \"123456\"\n}"
                },
                "description": "Send unified OTP notification (email or SMS)"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üí≥ Payment Processing",
          "description": "Complete payment flow with DIP providers",
          "item": [
            {
              "name": "11. Payment Intent Creation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Payment intent created', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json()).to.have.property('id');",
                      "    pm.expect(pm.response.json()).to.have.property('clientSecret');",
                      "    pm.expect(pm.response.json().amount).to.eql(5000);",
                      "    pm.expect(pm.response.json().currency).to.eql('usd');",
                      "    pm.expect(pm.response.json().status).to.eql('requires_payment_method');",
                      "});",
                      "",
                      "// Save payment intent ID for confirmation",
                      "const paymentIntentId = pm.response.json().id;",
                      "if (paymentIntentId) {",
                      "    pm.environment.set('payment_intent_id', paymentIntentId);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/payment/intent",
                  "host": ["{{local_base}}"],
                  "path": ["payment", "intent"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 5000,\n  \"currency\": \"usd\",\n  \"metadata\": {\n    \"bookingId\": \"booking-123\",\n    \"carModel\": \"Tesla Model 3\",\n    \"rentalDays\": \"3\"\n  }\n}"
                },
                "description": "Create payment intent for car rental booking"
              },
              "response": []
            },
            {
              "name": "12. Payment Confirmation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Payment confirmed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().id).to.eql(pm.environment.get('payment_intent_id'));",
                      "    pm.expect(pm.response.json().status).to.eql('succeeded');",
                      "    pm.expect(pm.response.json().amount).to.eql(5000);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/payment/confirm",
                  "host": ["{{local_base}}"],
                  "path": ["payment", "confirm"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"paymentIntentId\": \"{{payment_intent_id}}\",\n  \"paymentMethodId\": \"pm_mock_card_visa\"\n}"
                },
                "description": "Confirm payment with mock payment method"
              },
              "response": []
            },
            {
              "name": "13. Payment Status Check",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Payment status retrieved', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().id).to.eql(pm.environment.get('payment_intent_id'));",
                      "    pm.expect(pm.response.json().status).to.eql('succeeded');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{local_base}}/payment/status/{{payment_intent_id}}",
                  "host": ["{{local_base}}"],
                  "path": ["payment", "status", "{{payment_intent_id}}"]
                },
                "description": "Check payment status"
              },
              "response": []
            },
            {
              "name": "14. Payment Refund",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Refund processed', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json()).to.have.property('id');",
                      "    pm.expect(pm.response.json().amount).to.eql(2500);",
                      "    pm.expect(pm.response.json().status).to.eql('succeeded');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{local_base}}/payment/refund",
                  "host": ["{{local_base}}"],
                  "path": ["payment", "refund"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"paymentIntentId\": \"{{payment_intent_id}}\",\n  \"amount\": 2500\n}"
                },
                "description": "Process partial refund for car rental"
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "‚òÅÔ∏è Production Environment (Real Providers)",
      "description": "Production testing with real AWS/third-party providers",
      "item": [
        {
          "name": "üìä System Health",
          "item": [
            {
              "name": "Health Check (ALB)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is OK', function () {",
                      "    pm.response.to.have.status(200);",
                      "    pm.expect(pm.response.json().status).to.eql('ok');",
                      "});",
                      "",
                      "pm.test('Real providers configured', function () {",
                      "    const providers = pm.response.json().providers;",
                      "    // Verify real providers are being used",
                      "    pm.expect(providers.database).to.not.eql('in-memory');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{alb_base}}/api/",
                  "host": ["{{alb_base}}"],
                  "path": ["api", ""]
                },
                "description": "Production health check via ALB"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üîê Authentication Flow (Real AWS)",
          "item": [
            {
              "name": "Register User (Cognito)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/auth/register",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "auth", "register"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"real-user@yourdomain.com\",\n  \"password\": \"RealPassword!23\",\n  \"phone_number\": \"+84987654321\"\n}"
                },
                "description": "Register with real AWS Cognito"
              },
              "response": []
            },
            {
              "name": "OTP Initiate (Real SES)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/auth/login",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "auth", "login"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"otp_initiate\",\n  \"channel\": \"email\",\n  \"email\": \"verified@yourdomain.com\"\n}"
                },
                "description": "Real OTP via AWS SES (email must be verified)"
              },
              "response": []
            },
            {
              "name": "OTP Verify (Real Code)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/auth/login",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "auth", "login"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"otp_verify\",\n  \"channel\": \"email\",\n  \"email\": \"verified@yourdomain.com\",\n  \"otp_code\": \"REAL_CODE_FROM_EMAIL\"\n}"
                },
                "description": "Verify real OTP code from email"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìÑ KYC Flow (Real S3)",
          "item": [
            {
              "name": "KYC Presign (Real S3)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/kyc/presign",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "kyc", "presign"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"real-cognito-sub-uuid\",\n  \"contentType\": \"image/jpeg\"\n}"
                },
                "description": "Real S3 presigned URL generation"
              },
              "response": []
            },
            {
              "name": "KYC Validate (Step Functions)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/kyc/validate",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "kyc", "validate"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"cognitoSub\": \"real-cognito-sub-uuid\",\n  \"key\": \"kyc/real-cognito-sub-uuid/1234567890-document.jpg\"\n}"
                },
                "description": "Trigger real Step Functions workflow"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üìß Notifications (Real Services)",
          "item": [
            {
              "name": "Email (Real SES)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/notify/email",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "notify", "email"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"to\": \"verified@yourdomain.com\",\n  \"subject\": \"Production Test - Car Rental\",\n  \"text\": \"This is a real email sent via AWS SES from the Car Rental Platform.\"\n}"
                },
                "description": "Real email via AWS SES"
              },
              "response": []
            },
            {
              "name": "SMS (Real SNS/Twilio)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/notify/sms",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "notify", "sms"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"to\": \"+84987654321\",\n  \"message\": \"Production test: Your car rental confirmation from Real Provider!\"\n}"
                },
                "description": "Real SMS via AWS SNS or Twilio"
              },
              "response": []
            }
          ]
        },
        {
          "name": "üí≥ Payments (Real Stripe)",
          "item": [
            {
              "name": "Payment Intent (Stripe)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/payment/intent",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "payment", "intent"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"amount\": 7500,\n  \"currency\": \"usd\",\n  \"metadata\": {\n    \"bookingId\": \"prod-booking-456\",\n    \"carModel\": \"BMW X5\",\n    \"rentalDays\": \"5\"\n  }\n}"
                },
                "description": "Real Stripe payment intent"
              },
              "response": []
            },
            {
              "name": "Payment Confirm (Stripe)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" }
                ],
                "url": {
                  "raw": "{{alb_base}}/api/payment/confirm",
                  "host": ["{{alb_base}}"],
                  "path": ["api", "payment", "confirm"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"paymentIntentId\": \"pi_stripe_real_payment_id\",\n  \"paymentMethodId\": \"pm_card_visa_real\"\n}"
                },
                "description": "Confirm real Stripe payment"
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "üß™ Legacy API Gateway (Lambda)",
      "description": "Legacy authentication endpoints via API Gateway",
      "item": [
        {
          "name": "Initiate Login (Lambda)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{api_gateway_base}}/auth/login",
              "host": ["{{api_gateway_base}}"],
              "path": ["auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"initiate_auth\",\n  \"phone_number\": \"+841234567890\"\n}"
            },
            "description": "Legacy Lambda-based auth initiation"
          },
          "response": []
        },
        {
          "name": "Respond OTP (Lambda)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" }
            ],
            "url": {
              "raw": "{{api_gateway_base}}/auth/login",
              "host": ["{{api_gateway_base}}"],
              "path": ["auth", "login"]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"respond_to_challenge\",\n  \"session\": \"mock_session\",\n  \"otp_code\": \"123456\",\n  \"phone_number\": \"+841234567890\"\n}"
            },
            "description": "Legacy Lambda-based OTP response"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default environment if not set",
          "if (!pm.environment.get('local_base')) {",
          "    pm.environment.set('local_base', 'http://localhost:3000/api');",
          "}",
          "",
          "// Log the current request for debugging",
          "console.log('üöÄ Request:', pm.request.name);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to log response time",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Log response for debugging",
          "console.log('‚úÖ Response status:', pm.response.status);",
          "console.log('‚è±Ô∏è  Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "local_base",
      "value": "http://localhost:3000/api",
      "description": "Local development base URL with mock providers"
    },
    {
      "key": "alb_base", 
      "value": "http://your-alb-dns-name.ap-southeast-1.elb.amazonaws.com",
      "description": "Production ALB DNS name (update with real value)"
    },
    {
      "key": "api_gateway_base",
      "value": "https://your-api-id.execute-api.ap-southeast-1.amazonaws.com/prod",
      "description": "API Gateway URL (update with real value)"
    },
    {
      "key": "debug_otp",
      "value": "",
      "description": "Debug OTP code from mock provider"
    },
    {
      "key": "access_token",
      "value": "",
      "description": "Authentication access token"
    },
    {
      "key": "user_id",
      "value": "",
      "description": "User ID from sync operation"
    },
    {
      "key": "document_key",
      "value": "",
      "description": "KYC document key from presign"
    },
    {
      "key": "payment_intent_id",
      "value": "",
      "description": "Payment intent ID for confirmation"
    }
  ]
}